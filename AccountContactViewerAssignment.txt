============= Aura Component(.cmp) =============
<aura:component implements="flexipage:availableForRecordHome,force:hasRecordId" 
                controller="AccountContactController">
    
    <!-- Attributes -->
    <aura:attribute name="recordId" type="Id" />
    <aura:attribute name="contacts" type="Contact[]" />
    <aura:attribute name="newContact" type="Contact" 
                    default="{ 'sobjectType': 'Contact', 
                             'FirstName': '', 
                             'LastName': '', 
                             'Email': '' }" />
    <aura:attribute name="isNewContactModalOpen" type="Boolean" default="false" />
    <aura:attribute name="selectedContact" type="Contact" />
    <aura:attribute name="emailError" type="String" default="" />
    <aura:attribute name="contactToDeleteId" type="String" default="" />
    <aura:attribute name="showDeleteConfirmation" type="Boolean" default="false" />
    <aura:attribute name="contactToEditId" type="String" default="" />
    <aura:attribute name="showEditConfirmation" type="Boolean" default="false" />
    
    <!-- Handlers -->
    <aura:handler name="init" value="{!this}" action="{!c.doInit}" />
    
    <!-- Component Body -->
    <div class="slds-card">
        <div class="slds-card__header slds-grid">
            <header class="slds-media slds-media_center slds-has-flexi-truncate">
                <div class="slds-media__body">
                    <h2 class="slds-card__header-title">
                        <span>Contacts</span>
                    </h2>
                </div>
                <div class="slds-no-flex">
                    <lightning:button label="New Contact" 
                                     onclick="{!c.openNewContactModal}" 
                                     variant="brand" />
                </div>
            </header>
        </div>
        
        <div class="slds-card__body">
            <!-- Contacts Table -->
            <table class="slds-table slds-table_cell-buffer slds-table_bordered">
                <thead>
                    <tr class="slds-line-height_reset">
                        <th class="slds-text-title_caps" scope="col">Name</th>
                        <th class="slds-text-title_caps" scope="col">Email</th>
                        <th class="slds-text-title_caps" scope="col">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <aura:if isTrue="{!v.contacts.length > 0}">
                        <aura:iteration items="{!v.contacts}" var="contact">
                            <tr>
                                <td>{!contact.Name}</td>
                                <td>{!contact.Email}</td>
                                <td>
                                    <lightning:buttonIcon iconName="utility:edit" 
                                                         alternativeText="Edit" 
                                                         onclick="{!c.handleEditClick}" 
                                                         value="{!contact.Id}" />
                                    <lightning:buttonIcon iconName="utility:delete" 
                                                         alternativeText="Delete" 
                                                         onclick="{!c.handleDeleteClick}" 
                                                         value="{!contact.Id}" />
                                </td>
                            </tr>
                        </aura:iteration>
                        <aura:set attribute="else">
                            <tr>
                                <td colspan="3" class="slds-text-align_center">No contacts found</td>
                            </tr>
                        </aura:set>
                    </aura:if>
                </tbody>
            </table>
        </div>
    </div>

    <!-- New Contact Modal -->
    <aura:if isTrue="{!v.isNewContactModalOpen}">
        <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open slds-modal_small" aria-modal="true">
            <div class="slds-modal__container">
                <header class="slds-modal__header">
                    <h2 class="slds-text-heading_medium slds-hyphenate">New Contact</h2>
                </header>
                <div class="slds-modal__content slds-var-p-around_medium">
                    <lightning:input label="First Name" 
                                    value="{!v.newContact.FirstName}" 
                                    required="true" />
                    <lightning:input label="Last Name" 
                                    value="{!v.newContact.LastName}" 
                                    required="true" />
                    <lightning:input label="Email" 
                                    value="{!v.newContact.Email}" 
                                    type="email" 
                                    required="true" 
                                    messageWhenPatternMismatch="Please enter a valid email address" />
                    <aura:if isTrue="{!not(empty(v.emailError))}">
                        <div class="slds-text-color_error">{!v.emailError}</div>
                    </aura:if>
                </div>
                <footer class="slds-modal__footer">
                    <lightning:button label="Cancel" 
                                     onclick="{!c.closeNewContactModal}" />
                    <lightning:button label="Save" 
                                     variant="brand" 
                                     onclick="{!c.saveNewContact}" />
                </footer>
            </div>
        </section>
        <div class="slds-backdrop slds-backdrop_open"></div>
    </aura:if>
    
    <!-- Edit Confirmation Modal -->
    <aura:if isTrue="{!v.showEditConfirmation}">
        <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
            <div class="slds-modal__container">
                <header class="slds-modal__header">
                    <h2 class="slds-modal__title">Edit Contact</h2>
                </header>
                <div class="slds-modal__content slds-var-p-around_medium">
                    <lightning:input label="First Name"
                                    value="{!v.selectedContact.FirstName}"
                                    required="true" />
                    <lightning:input label="Last Name"
                                    value="{!v.selectedContact.LastName}"
                                    required="true" />
                    <lightning:input label="Email"
                                    value="{!v.selectedContact.Email}"
                                    type="email"
                                    required="true"
                                    messageWhenPatternMismatch="Please enter a valid email address" />
                    <aura:if isTrue="{!not(empty(v.emailError))}">
                        <div class="slds-text-color_error">{!v.emailError}</div>
                    </aura:if>
                </div>
                <footer class="slds-modal__footer">
                    <lightning:button variant="neutral" label="Cancel" onclick="{!c.cancelEdit}" />
                    <lightning:button variant="brand" label="Save" onclick="{!c.confirmEdit}" />
                </footer>
            </div>
        </section>
        <div class="slds-backdrop slds-backdrop_open"></div>
    </aura:if>
    
    <!-- Delete Confirmation Modal -->
    <aura:if isTrue="{!v.showDeleteConfirmation}">
        <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
            <div class="slds-modal__container">
                <header class="slds-modal__header">
                    <h2 class="slds-modal__title">Confirm Deletion</h2>
                </header>
                <div class="slds-modal__content slds-var-p-around_medium">
                    Are you sure you want to delete this contact?
                </div>
                <footer class="slds-modal__footer">
                    <lightning:button variant="neutral" label="Cancel" onclick="{!c.cancelDelete}" />
                    <lightning:button variant="brand" label="Delete" onclick="{!c.confirmDelete}" />
                </footer>
            </div>
        </section>
        <div class="slds-backdrop slds-backdrop_open"></div>
    </aura:if>
</aura:component>


============= Aura Controller(.js) =============
({
    doInit: function(component, event, helper) {
        helper.getContacts(component)
    },
    
    openNewContactModal: function(component, event, helper) {
        component.set("v.newContact", { 
            'sobjectType': 'Contact', 
            'FirstName': '', 
            'LastName': '', 
            'Email': '',
            'AccountId': component.get("v.recordId")
        })
        component.set("v.emailError", "")
        component.set("v.isNewContactModalOpen", true)
    },
    
    closeNewContactModal: function(component, event, helper) {
        component.set("v.isNewContactModalOpen", false)
    },
    
    saveNewContact: function(component, event, helper) {
        var newContact = component.get("v.newContact")
        
        if (!newContact.FirstName || !newContact.LastName || !newContact.Email) {
            component.set("v.emailError", "All fields are required")
            return
        }
        
        var emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/
        if (!emailPattern.test(newContact.Email)) {
            component.set("v.emailError", "Please enter a valid email address")
            return
        }
        
        helper.createContact(component)
    },
    
    handleEditClick: function(component, event, helper) {
        var contactId = event.getSource().get("v.value")
        var contacts = component.get("v.contacts")
        var selectedContact = contacts.find(contact => contact.Id === contactId)
        
        if (selectedContact) {
            // Create a deep copy of the contact
            var contactCopy = JSON.parse(JSON.stringify(selectedContact))
            
            // Ensure AccountId is set
            contactCopy.AccountId = component.get("v.recordId")
            
            // Set the selected contact
            component.set("v.selectedContact", contactCopy)
            component.set("v.contactToEditId", contactId)
            component.set("v.emailError", "")
            component.set("v.showEditConfirmation", true)
        }
    },
    
    cancelEdit: function(component, event, helper) {
        component.set("v.showEditConfirmation", false)
        component.set("v.contactToEditId", "")
        component.set("v.emailError", "")
    },
    
    confirmEdit: function(component, event, helper) {
        var selectedContact = component.get("v.selectedContact")
        
        // Validate required fields
        if (!selectedContact.FirstName || !selectedContact.LastName || !selectedContact.Email) {
            component.set("v.emailError", "All fields are required")
            return
        }
        
        // Validate email format
        var emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/
        if (!emailPattern.test(selectedContact.Email)) {
            component.set("v.emailError", "Please enter a valid email address")
            return
        }
        
        // Ensure AccountId is set
        selectedContact.AccountId = component.get("v.recordId")
        
        // Close the modal
        component.set("v.showEditConfirmation", false)
        component.set("v.contactToEditId", "")
        component.set("v.emailError", "")
        
        // Update the contact
        helper.performEdit(component, selectedContact)
    },
    
    handleDeleteClick: function(component, event, helper) {
        var contactId = event.getSource().get("v.value")
        component.set("v.contactToDeleteId", contactId)
        component.set("v.showDeleteConfirmation", true)
    },
    
    cancelDelete: function(component, event, helper) {
        component.set("v.showDeleteConfirmation", false)
        component.set("v.contactToDeleteId", "")
    },
    
    confirmDelete: function(component, event, helper) {
        var contactId = component.get("v.contactToDeleteId")
        component.set("v.showDeleteConfirmation", false)
        
        if (contactId) {
            helper.performDelete(component, contactId)
        }
    }
})


============= Aura Helper (.js) =============
({
    getContacts: function(component) {
        var action = component.get("c.getAccountContacts");
        action.setParams({ 
            accountId: component.get("v.recordId") 
        });
        
        action.setCallback(this, function(response) {
            if (response.getState() === "SUCCESS") {
                component.set("v.contacts", response.getReturnValue());
            } else {
                console.error("Error fetching contacts", response.getError());
                this.showToast("Error", "Failed to load contacts", "error");
            }
        });
        
        $A.enqueueAction(action);
    },

    createContact: function(component) {
        var action = component.get("c.saveContact");
        action.setParams({ 
            contact: component.get("v.newContact") 
        });
        
        action.setCallback(this, function(response) {
            if (response.getState() === "SUCCESS") {
                component.set("v.isNewContactModalOpen", false);
                this.showToast("Success", "Contact created successfully", "success");
                this.getContacts(component);
            } else {
                console.error("Error creating contact", response.getError());
                this.showToast("Error", "Failed to create contact", "error");
            }
        });
        
        $A.enqueueAction(action);
    },

    performEdit: function(component, contact) {
        var action = component.get("c.updateContact");
        action.setParams({ 
            contact: contact 
        });
        
        action.setCallback(this, function(response) {
            if (response.getState() === "SUCCESS") {
                this.showToast("Success", "Contact updated successfully", "success");
                this.getContacts(component);
            } else {
                var errors = response.getError();
                var message = errors && errors[0] && errors[0].message ? errors[0].message : "Unknown error";
                console.error("Edit error:", message);
                this.showToast("Error", message, "error");
            }
        });
        
        $A.enqueueAction(action);
    },

    performDelete: function(component, contactId) {
        var action = component.get("c.deleteContact");
        action.setParams({ 
            contactId: contactId 
        });
        
        action.setCallback(this, function(response) {
            if (response.getState() === "SUCCESS") {
                this.showToast("Success", "Contact deleted successfully", "success");
                this.getContacts(component);
            } else {
                var errors = response.getError();
                var message = "Unknown error";
                
                if (errors && errors[0]) {
                    var errorMsg = errors[0].message || "";
                    
                    // Check for case association error
                    if (errorMsg.includes("associated with the following cases")) {
                        message = "This contact cannot be deleted because it has associated cases. Please remove the case associations first.";
                    } else {
                        message = errorMsg;
                    }
                }
                
                console.error("Delete error:", message);
                this.showToast("Error", message, "error");
            }
            
            // Close the confirmation modal
            component.set("v.showDeleteConfirmation", false);
        });
        
        $A.enqueueAction(action);
    },

    showToast: function(title, message, type) {
        var toastEvent = $A.get("e.force:showToast");
        toastEvent.setParams({ 
            title: title, 
            message: message, 
            type: type 
        });
        toastEvent.fire();
    }
})



============= Aura Meta File (.xml) =============
<?xml version="1.0" encoding="UTF-8"?>
<AuraDefinitionBundle xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>63.0</apiVersion>
    <description>Component to manage Contacts on the Account record page.</description>
    <isExposed>true</isExposed>
    <targets>
        <target>lightning__RecordPage</target>
    </targets>
    <targetConfigs>
        <targetConfig targets="lightning__RecordPage">
            <objects>
                <object>Account</object>
            </objects>
        </targetConfig>
    </targetConfigs>
</AuraDefinitionBundle>


============= Apex Controller (.cls) =============
public with sharing class AccountContactController {
    
    @AuraEnabled
    public static List<Contact> getAccountContacts(Id accountId) {
        return [SELECT Id, FirstName, LastName, Name, Email 
                FROM Contact 
                WHERE AccountId = :accountId 
                ORDER BY Name ASC];
    }
    
    @AuraEnabled
    public static Contact saveContact(Contact contact) {
        // Validate required fields
        if (String.isBlank(contact.LastName)) {
            throw new AuraHandledException('Last Name is required');
        }
        
        // Validate email format if provided
        if (String.isNotBlank(contact.Email)) {
            String emailRegex = '^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$';
            Pattern emailPattern = Pattern.compile(emailRegex);
            Matcher emailMatcher = emailPattern.matcher(contact.Email);
            
            if (!emailMatcher.matches()) {
                throw new AuraHandledException('Invalid email format');
            }
        }
        
        try {
            upsert contact;
            return contact;
        } catch (Exception e) {
            throw new AuraHandledException('Error creating contact: ' + e.getMessage());
        }
    }
    
    @AuraEnabled
    public static Contact updateContact(Contact contact) {
        // Validate required fields
        if (String.isBlank(contact.LastName)) {
            throw new AuraHandledException('Last Name is required');
        }
        
        // Validate email format if provided
        if (String.isNotBlank(contact.Email)) {
            String emailRegex = '^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$';
            Pattern emailPattern = Pattern.compile(emailRegex);
            Matcher emailMatcher = emailPattern.matcher(contact.Email);
            
            if (!emailMatcher.matches()) {
                throw new AuraHandledException('Invalid email format');
            }
        }
        
        try {
            update contact;
            return contact;
        } catch (Exception e) {
            throw new AuraHandledException('Error updating contact: ' + e.getMessage());
        }
    }
    
    @AuraEnabled
    public static void deleteContact(Id contactId) {
        try {
            delete new Contact(Id = contactId);
        } catch (Exception e) {
            throw new AuraHandledException('Error deleting contact: ' + e.getMessage());
        }
    }
}


============= Apex Test Class (.cls) =============
@isTest
private class AccountContactControllerTest {
    
    @TestSetup
    static void setupTestData() {
        // Create test account
        Account testAccount = new Account(Name='Test Account');
        insert testAccount;
    }
    
    @IsTest 
    static void testGetAccountContacts() {
        // Get the test account
        Account testAccount = [SELECT Id FROM Account WHERE Name='Test Account' LIMIT 1];
        
        // Create a test contact
        Contact con = new Contact(
            FirstName='John', 
            LastName='Doe', 
            Email='john.doe@example.com',
            AccountId=testAccount.Id
        );
        insert con;
        
        // Call the method to test
        Test.startTest();
        List<Contact> contacts = AccountContactController.getAccountContacts(testAccount.Id);
        Test.stopTest();
        
        // Verify results
        System.assertEquals(1, contacts.size(), 'Should return exactly one contact');
        System.assertEquals('John', contacts[0].FirstName, 'First name should match');
        System.assertEquals('Doe', contacts[0].LastName, 'Last name should match');
        System.assertEquals('john.doe@example.com', contacts[0].Email, 'Email should match');
    }
    
    @IsTest 
    static void testSaveContactMissingLastName() {
        // Test case 1: Required fields validation
        Test.startTest();
        try {
            Contact contact = new Contact();
            AccountContactController.saveContact(contact);
            System.assert(false, 'Expected exception for missing last name');
        } catch (Exception e) {
            // Just verify an exception was thrown
            System.assert(true, 'Exception was thrown as expected');
        }
        Test.stopTest();
    }
    
    @IsTest 
    static void testSaveContactInvalidEmail() {
        // Test case 2: Invalid email format validation
        Test.startTest();
        try {
            Contact contact = new Contact(LastName = 'Doe', Email = 'invalidemail');
            AccountContactController.saveContact(contact);
            System.assert(false, 'Expected exception for invalid email');
        } catch (Exception e) {
            // Just verify an exception was thrown
            System.assert(true, 'Exception was thrown as expected');
        }
        Test.stopTest();
    }
    
    @IsTest 
    static void testSaveContactSuccess() {
        // Test case 3: Successful contact creation
        Test.startTest();
        Contact contact = new Contact(
            LastName = 'Doe',
            Email = 'john.doe@example.com'
        );
        Contact result = AccountContactController.saveContact(contact);
        Test.stopTest();
        
        // Verify the contact was created
        System.assertNotEquals(null, result.Id, 'Contact ID should not be null');
        
        // Query to verify
        Contact savedContact = [SELECT LastName, Email FROM Contact WHERE Id = :result.Id];
        System.assertEquals('Doe', savedContact.LastName, 'Last name should match');
        System.assertEquals('john.doe@example.com', savedContact.Email, 'Email should match');
    }
    
    @IsTest
    static void testUpdateContactSuccess() {
        // Create a test contact
        Contact testContact = new Contact(
            FirstName = 'John',
            LastName = 'Doe',
            Email = 'john.doe@example.com'
        );
        insert testContact;
        
        // Update the contact using the controller method
        Test.startTest();
        testContact.LastName = 'Smith';
        testContact.Email = 'john.smith@example.com';
        Contact updatedResult = AccountContactController.updateContact(testContact);
        Test.stopTest();
        
        // Verify that the contact was updated
        Contact updatedContact = [SELECT LastName, Email FROM Contact WHERE Id = :testContact.Id];
        System.assertEquals('Smith', updatedContact.LastName, 'Last name should be updated');
        System.assertEquals('john.smith@example.com', updatedContact.Email, 'Email should be updated');
    }
    
    @IsTest 
    static void testUpdateContactMissingLastName() {
        // Create a test contact
        Contact testContact = new Contact(
            FirstName = 'John',
            LastName = 'Doe',
            Email = 'john.doe@example.com'
        );
        insert testContact;
        
        // Try to update with missing last name
        Test.startTest();
        testContact.LastName = '';
        try {
            AccountContactController.updateContact(testContact);
            System.assert(false, 'Expected exception for missing last name');
        } catch (Exception e) {
            // Just verify an exception was thrown
            System.assert(true, 'Exception was thrown as expected');
        }
        Test.stopTest();
    }
    
    @IsTest 
    static void testUpdateContactInvalidEmail() {
        // Create a test contact
        Contact testContact = new Contact(
            FirstName = 'John',
            LastName = 'Doe',
            Email = 'john.doe@example.com'
        );
        insert testContact;
        
        // Try to update with invalid email
        Test.startTest();
        testContact.Email = 'invalidemail';
        try {
            AccountContactController.updateContact(testContact);
            System.assert(false, 'Expected exception for invalid email');
        } catch (Exception e) {
            // Just verify an exception was thrown
            System.assert(true, 'Exception was thrown as expected');
        }
        Test.stopTest();
    }
    
    @IsTest 
    static void testDeleteContact() {
        // Create a test contact
        Contact testContact = new Contact(
            FirstName = 'John',
            LastName = 'Doe',
            Email = 'john.doe@example.com'
        );
        insert testContact;
        
        // Call the deleteContact method
        Test.startTest();
        AccountContactController.deleteContact(testContact.Id);
        Test.stopTest();
        
        // Verify that the contact is deleted
        List<Contact> deletedContacts = [SELECT Id FROM Contact WHERE Id = :testContact.Id];
        System.assertEquals(0, deletedContacts.size(), 'Contact should be deleted');
    }
    
    @IsTest 
    static void testDeleteContactInvalid() {
        // Try to delete a non-existent contact
        Test.startTest();
        try {
            AccountContactController.deleteContact('003000000000000AAA'); // Invalid ID
            System.assert(false, 'Expected exception for invalid contact ID');
        } catch (Exception e) {
            // Just verify an exception was thrown
            System.assert(true, 'Exception was thrown as expected');
        }
        Test.stopTest();
    }
}
